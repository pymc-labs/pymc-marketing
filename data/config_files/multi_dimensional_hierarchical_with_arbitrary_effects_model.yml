model:
  class: pymc_marketing.mmm.multidimensional.MMM
  kwargs:
    date_column: "date"
    channel_columns: # explicit for reproducibility
      - channel_1
      - channel_2
      # …
    target_column: "y"
    dims: ["market"]  # Keep as array for consistency
    # Standard scaling format
    scaling:
      class: pymc_marketing.mmm.scaling.Scaling
      kwargs:
        target:
          method: "max"
          dims: []
        channel:
          method: "max"
          dims: ["market"]

    # --- media transformations ---------------------------------------
    adstock:
      class: pymc_marketing.mmm.GeometricAdstock
      kwargs: {l_max: 12}        # any other hyper-parameters here

    saturation:
      class: pymc_marketing.mmm.LogisticSaturation
      kwargs:
        priors:
          beta:
            distribution: "HalfNormal"
            sigma: 1.0
            dims: "channel"
          lam:
            distribution: "Gamma"
            alpha:
              distribution: "Gamma"
              mu: 1
              sigma: 0.5
              dims: "market"
            beta: 1
            dims: ["market", "channel"]                # default α, λ priors inside the class

    # --- model (hierarchical) priors ---------------------------------
    model_config:
      intercept:
        distribution: HalfCauchy
        beta:
          distribution: HalfNormal
          sigma: 0.3
        dims: market

      likelihood:
        distribution: TruncatedNormal
        lower: 0
        sigma:
          distribution: "HalfNormal"
          sigma: 1
          dims: "market"
        dims: ["date", "market"]
# ----------------------------------------------------------------------
# (optional) sampler options you plan to forward to pm.sample():
    sampler_config:
      tune: 1000
      draws: 200
      chains: 8
      random_seed: 42
      target_accept: 0.90
      # if you want to use a custom sampler (e.g: nutpie) you could add # nuts_sampler: "nutpie"
# ----------------------------------------------------------------------
# Effects with complex priors
effects:
  # 1. Linear Trend Effect with complex nested priors
  - class: pymc_marketing.mmm.additive_effect.LinearTrendEffect
    kwargs:
      trend:
        class: pymc_marketing.mmm.LinearTrend
        kwargs:
          n_changepoints: 2
          include_intercept: false
          dims: ["market"]  # Keep as array format
          priors:
            delta:
              distribution: "Normal"
              mu:
                distribution: "HalfNormal"
                sigma: 0.5
              sigma: 0.1
              dims: ["market", "changepoint"]
      prefix: "trend"

  # 2. Fourier Effect with complex nested priors
  - class: pymc_marketing.mmm.additive_effect.FourierEffect
    kwargs:
      fourier:
        class: pymc_marketing.mmm.WeeklyFourier
        kwargs:
          n_order: 3
          prefix: "weekly_fourier"
          prior:
            distribution: "Laplace"
            mu:
              distribution: "HalfNormal"
              sigma: 0.5
              dims: "market"
            b: 0.1
            dims: ["weekly_fourier", "market"]

# ----------------------------------------------------------------------
# Calibration examples (lift tests + CPT constraints)
calibration:
  - add_lift_test_measurements:
      df_lift_test:
        class: pandas.DataFrame
        kwargs:
          data:
            market: ["US", "EU"]
            channel: ["channel_1", "channel_2"]
            x: [80.0, 50.0]
            delta_x: [10.0, 6.0]
            delta_y: [6.0, 4.0]
            sigma: [1.5, 1.2]
      name: "example_lift_tests"
  - add_cost_per_target_calibration:
      data:
        class: pandas.read_csv
        kwargs:
          filepath_or_buffer:
            class: pathlib.Path
            kwargs:
              args:
                - class: pyprojroot.here
                - "data"
                - "processed"
                - "X.csv"
          parse_dates: ["date"]
      calibration_data:
        class: pandas.DataFrame
        kwargs:
          data:
            market: ["US", "EU"]
            channel: ["channel_1", "channel_2"]
            cost_per_target: [30.0, 42.5]
            sigma: [2.0, 3.0]
      name_prefix: "example_cpt"


# ----------------------------------------------------------------------
# (optional) idata from a previous sample
# idata_path: "data/idata.nc"

# ----------------------------------------------------------------------
# (optional) Data paths
# data:
#   X_path: "data/X.csv"
#   y_path: "data/y.csv"
