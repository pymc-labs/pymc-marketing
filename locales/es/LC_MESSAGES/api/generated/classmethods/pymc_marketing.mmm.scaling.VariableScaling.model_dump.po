# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 11:28+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.scaling.VariableScaling.model_dump.rst:2
#: 8a3850d316544543ac0e68d47fb222d2
msgid "VariableScaling.model\\_dump"
msgstr ""

#: 9b8584e8df3a42e2b821a75a41e3be7e of pydantic.main.BaseModel.model_dump:2
msgid "!!! abstract \"Usage Documentation\""
msgstr ""

#: 873972806132490a8686ada17e385195 of pydantic.main.BaseModel.model_dump:3
msgid "[`model_dump`](../concepts/serialization.md#python-mode)"
msgstr ""

#: a63fff2e3abf45de9f82bbfc37bf271a of pydantic.main.BaseModel.model_dump:5
msgid ""
"Generate a dictionary representation of the model, optionally specifying "
"which fields to include or exclude."
msgstr ""

#: b932135a101149219018f9095b4d360b of pydantic.main.BaseModel.model_dump:7
msgid "Args:"
msgstr ""

#: dc5dd05a67324dc89237e85ec4ce4c6f of pydantic.main.BaseModel.model_dump:8
msgid "mode: The mode in which `to_python` should run."
msgstr ""

#: 2e8dd8c7f9094adbac3b8da5221e44f4 of pydantic.main.BaseModel.model_dump:9
msgid ""
"If mode is 'json', the output will only contain JSON serializable types. "
"If mode is 'python', the output may contain non-JSON-serializable Python "
"objects."
msgstr ""

#: e46425034ed84efea6891370602faa5a of pydantic.main.BaseModel.model_dump:11
msgid ""
"include: A set of fields to include in the output. exclude: A set of "
"fields to exclude from the output. context: Additional context to pass to"
" the serializer. by_alias: Whether to use the field's alias in the "
"dictionary key if defined. exclude_unset: Whether to exclude fields that "
"have not been explicitly set. exclude_defaults: Whether to exclude fields"
" that are set to their default value. exclude_none: Whether to exclude "
"fields that have a value of `None`. exclude_computed_fields: Whether to "
"exclude computed fields."
msgstr ""

#: 51a134d50a4044d5a2740f6e2bb388a4 of pydantic.main.BaseModel.model_dump:19
msgid ""
"While this can be useful for round-tripping, it is usually recommended tu"
" use the dedicated `round_trip` parameter instead."
msgstr ""

#: 4db3209b08bb4f6abad1eb1e852f6c39 of pydantic.main.BaseModel.model_dump:21
msgid ""
"round_trip: If True, dumped values should be valid as input for non-"
"idempotent types such as Json[T]. warnings: How to handle serialization "
"errors. False/\"none\" ignores them, True/\"warn\" logs errors,"
msgstr ""

#: 912cfa8bfc4745549e1308e83be31181 of pydantic.main.BaseModel.model_dump:23
msgid ""
"\"error\" raises a "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."
msgstr ""

#: 858dd70409574b4cb10dd48b808197fe of pydantic.main.BaseModel.model_dump:24
msgid ""
"fallback: A function to call when an unknown value is encountered. If not"
" provided,"
msgstr ""

#: faf01dc6d04a43959b83b02440c25621 of pydantic.main.BaseModel.model_dump:25
msgid ""
"a "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError] "
"error is raised."
msgstr ""

#: 6f80e62426b84986bdbea59686ccc846 of pydantic.main.BaseModel.model_dump:26
msgid ""
"serialize_as_any: Whether to serialize fields with duck-typing "
"serialization behavior."
msgstr ""

#: 7a0b3f2e1fe44b2ab1d42570486baf4e of pydantic.main.BaseModel.model_dump:28
msgid "Returns:"
msgstr ""

#: c1e41123930d4ac2bfd60d12fa5cc870 of pydantic.main.BaseModel.model_dump:29
msgid "A dictionary representation of the model."
msgstr ""

#~ msgid "[`model_dump`](../concepts/serialization.md#modelmodel_dump)"
#~ msgstr ""

#~ msgid ""
#~ "include: A set of fields to "
#~ "include in the output. exclude: A "
#~ "set of fields to exclude from the"
#~ " output. context: Additional context to "
#~ "pass to the serializer. by_alias: "
#~ "Whether to use the field's alias "
#~ "in the dictionary key if defined. "
#~ "exclude_unset: Whether to exclude fields "
#~ "that have not been explicitly set. "
#~ "exclude_defaults: Whether to exclude fields"
#~ " that are set to their default "
#~ "value. exclude_none: Whether to exclude "
#~ "fields that have a value of "
#~ "`None`. round_trip: If True, dumped "
#~ "values should be valid as input "
#~ "for non-idempotent types such as "
#~ "Json[T]. warnings: How to handle "
#~ "serialization errors. False/\"none\" ignores "
#~ "them, True/\"warn\" logs errors,"
#~ msgstr ""
