# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 11:28+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.hsgp.SoftPlusHSGP.model_json_schema.rst:2
#: 161a25dd610645c99a0125f7c100ced6
msgid "SoftPlusHSGP.model\\_json\\_schema"
msgstr ""

#: c9dc335bab5146c38cff7154bb666da5 of
#: pydantic.main.BaseModel.model_json_schema:2
msgid "Generates a JSON schema for a model class."
msgstr ""

#: e2ae3a04cb694730bc7a88d102f7e135 of
#: pydantic.main.BaseModel.model_json_schema:4
msgid "Args:"
msgstr ""

#: 6d9b521307de4d5f88b333ca76009095 of
#: pydantic.main.BaseModel.model_json_schema:5
msgid ""
"by_alias: Whether to use attribute aliases or not. ref_template: The "
"reference template. union_format: The format to use when combining "
"schemas from unions together. Can be one of:"
msgstr ""

#: 6db0535ccb5b4d4c9b4a3e08ce912e4e of
#: pydantic.main.BaseModel.model_json_schema:9
msgid ""
"`'any_of'`: Use the [`anyOf`](https://json-schema.org/understanding-json-"
"schema/reference/combining#anyOf)"
msgstr ""

#: 508e078658c743d7b6572bbf63cb92fc of
#: pydantic.main.BaseModel.model_json_schema:10
msgid ""
"keyword to combine schemas (the default). - `'primitive_type_array'`: Use"
" the [`type`](https://json-schema.org/understanding-json-"
"schema/reference/type) keyword as an array of strings, containing each "
"type of the combination. If any of the schemas is not a primitive type "
"(`string`, `boolean`, `null`, `integer` or `number`) or contains "
"constraints/metadata, falls back to `any_of`."
msgstr ""

#: 2cb1861d94eb41898106d88b20733bae of
#: pydantic.main.BaseModel.model_json_schema:15
msgid ""
"schema_generator: To override the logic used to generate the JSON schema,"
" as a subclass of"
msgstr ""

#: ae2388a4a1c746e383766537460a9b41 of
#: pydantic.main.BaseModel.model_json_schema:16
msgid "`GenerateJsonSchema` with your desired modifications"
msgstr ""

#: 2f339b9016234c3785a7c8de8fbbda0a of
#: pydantic.main.BaseModel.model_json_schema:17
msgid "mode: The mode in which to generate the schema."
msgstr ""

#: fe2d84c2c29549b4ab0f27585680011d of
#: pydantic.main.BaseModel.model_json_schema:19
msgid "Returns:"
msgstr ""

#: ae5f737b8f084db382b143385a85902d of
#: pydantic.main.BaseModel.model_json_schema:20
msgid "The JSON schema for the given model class."
msgstr ""

#~ msgid ""
#~ "by_alias: Whether to use attribute "
#~ "aliases or not. ref_template: The "
#~ "reference template. schema_generator: To "
#~ "override the logic used to generate "
#~ "the JSON schema, as a subclass of"
#~ msgstr ""
