# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 11:28+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.fourier.YearlyFourier.model_dump.rst:2
#: d8410e9590cc40e4af9d4604d4c7ba30
msgid "YearlyFourier.model\\_dump"
msgstr "YearlyFourier.model\\_dump"

#: 088da7a7660c4351a6e62b4e167618b2 of pydantic.main.BaseModel.model_dump:2
msgid "!!! abstract \"Usage Documentation\""
msgstr "!!! abstract \"Documentación de Uso\""

#: 9fc956c700c34d4cb2b87334b5e36d84 of pydantic.main.BaseModel.model_dump:3
msgid "[`model_dump`](../concepts/serialization.md#python-mode)"
msgstr "[`model_dump`](../concepts/serialization.md#python-mode)"

#: 136ae025703141dfab45dabf47c54807 of pydantic.main.BaseModel.model_dump:5
msgid ""
"Generate a dictionary representation of the model, optionally specifying "
"which fields to include or exclude."
msgstr ""
"Genera una representación de diccionario del modelo, especificando "
"opcionalmente qué campos incluir o excluir."

#: 15cb01edd7944e6da434e3f20aee3a3f of pydantic.main.BaseModel.model_dump:7
msgid "Args:"
msgstr "Args:"

#: 5f5e05ee66b044619b3bf01b4ba077be of pydantic.main.BaseModel.model_dump:8
msgid "mode: The mode in which `to_python` should run."
msgstr "modo: El modo en el que `to_python` debe ejecutarse."

#: 220d74aad8d0487494f0f231351afd03 of pydantic.main.BaseModel.model_dump:9
msgid ""
"If mode is 'json', the output will only contain JSON serializable types. If "
"mode is 'python', the output may contain non-JSON-serializable Python "
"objects."
msgstr ""
"Si el modo es 'json', la salida solo contendrá tipos serializables en JSON. "
"Si el modo es 'python', la salida puede contener objetos de Python no "
"serializables en JSON."

#: 8686aa86222b47359326d836ee6e63fa of pydantic.main.BaseModel.model_dump:11
msgid ""
"include: A set of fields to include in the output. exclude: A set of fields "
"to exclude from the output. context: Additional context to pass to the "
"serializer. by_alias: Whether to use the field's alias in the dictionary key"
" if defined. exclude_unset: Whether to exclude fields that have not been "
"explicitly set. exclude_defaults: Whether to exclude fields that are set to "
"their default value. exclude_none: Whether to exclude fields that have a "
"value of `None`. exclude_computed_fields: Whether to exclude computed "
"fields."
msgstr ""
"include: Un conjunto de campos a incluir en la salida. exclude: Un conjunto "
"de campos a excluir de la salida. context: Contexto adicional para pasar al "
"serializador. by_alias: Si se debe utilizar el alias del campo en la clave "
"del diccionario si está definido. exclude_unset: Si se deben excluir los "
"campos que no han sido establecidos explícitamente. exclude_defaults: Si se "
"deben excluir los campos que están establecidos en su valor predeterminado. "
"exclude_none: Si se deben excluir los campos que tienen un valor de `None`. "
"exclude_computed_fields: Si se deben excluir los campos computados."

#: e2112211e435444c9503e3b1db0268c1 of pydantic.main.BaseModel.model_dump:19
msgid ""
"While this can be useful for round-tripping, it is usually recommended tu "
"use the dedicated `round_trip` parameter instead."
msgstr ""
"Aunque esto puede ser útil para el intercambio de datos, generalmente se "
"recomienda utilizar el parámetro dedicado `round_trip` en su lugar."

#: c366b3cbdb644f35bfbb357268a784db of pydantic.main.BaseModel.model_dump:21
msgid ""
"round_trip: If True, dumped values should be valid as input for non-"
"idempotent types such as Json[T]. warnings: How to handle serialization "
"errors. False/\"none\" ignores them, True/\"warn\" logs errors,"
msgstr ""
"round_trip: Si es verdadero, los valores volcado deben ser válidos como "
"entrada para tipos no idempotentes como Json[T]. advertencias: Cómo manejar "
"errores de serialización. Falso/\"ninguno\" los ignora, "
"Verdadero/\"advertir\" registra errores,"

#: 725bd2843e5648d589f9f25a0f683af1 of pydantic.main.BaseModel.model_dump:23
msgid ""
"\"error\" raises a "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."
msgstr ""
"\"error\" genera un "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."

#: d5e32211b5d245d393a842665015650f of pydantic.main.BaseModel.model_dump:24
msgid ""
"fallback: A function to call when an unknown value is encountered. If not "
"provided,"
msgstr ""
"fallback: Una función que se llama cuando se encuentra un valor desconocido."
" Si no se proporciona,"

#: b0810bf3fba94ab2aac1c4aad47246ed of pydantic.main.BaseModel.model_dump:25
msgid ""
"a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError] "
"error is raised."
msgstr ""
"se genera un error de "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."

#: 89f1dcdd3f5f43a585e2af5dab5d8c50 of pydantic.main.BaseModel.model_dump:26
msgid ""
"serialize_as_any: Whether to serialize fields with duck-typing serialization"
" behavior."
msgstr ""
"serialize_as_any: Si se deben serializar los campos con un comportamiento de"
" serialización de tipo \"duck-typing\"."

#: 320843ffce2c41888199a5ef3c71808e of pydantic.main.BaseModel.model_dump:28
msgid "Returns:"
msgstr "Devoluciones:"

#: beaddd1e454b4a5799c298c82110ad5f of pydantic.main.BaseModel.model_dump:29
msgid "A dictionary representation of the model."
msgstr "Una representación en diccionario del modelo."

#~ msgid "[`model_dump`](../concepts/serialization.md#modelmodel_dump)"
#~ msgstr "[`model_dump`](../concepts/serialization.md#modelmodel_dump)"

#~ msgid ""
#~ "include: A set of fields to include in the output. exclude: A set of fields "
#~ "to exclude from the output. context: Additional context to pass to the "
#~ "serializer. by_alias: Whether to use the field's alias in the dictionary key"
#~ " if defined. exclude_unset: Whether to exclude fields that have not been "
#~ "explicitly set. exclude_defaults: Whether to exclude fields that are set to "
#~ "their default value. exclude_none: Whether to exclude fields that have a "
#~ "value of `None`. round_trip: If True, dumped values should be valid as input"
#~ " for non-idempotent types such as Json[T]. warnings: How to handle "
#~ "serialization errors. False/\"none\" ignores them, True/\"warn\" logs "
#~ "errors,"
#~ msgstr ""
#~ "include: Un conjunto de campos a incluir en la salida. exclude: Un conjunto "
#~ "de campos a excluir de la salida. context: Contexto adicional para pasar al "
#~ "serializador. by_alias: Si se debe utilizar el alias del campo en la clave "
#~ "del diccionario si está definido. exclude_unset: Si se deben excluir los "
#~ "campos que no han sido establecidos explícitamente. exclude_defaults: Si se "
#~ "deben excluir los campos que están establecidos en su valor predeterminado. "
#~ "exclude_none: Si se deben excluir los campos que tienen un valor de `None`. "
#~ "round_trip: Si es True, los valores volcado deben ser válidos como entrada "
#~ "para tipos no idempotentes como Json[T]. warnings: Cómo manejar los errores "
#~ "de serialización. False/\"none\" los ignora, True/\"warn\" registra los "
#~ "errores,"
