# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.fourier.YearlyFourier.model_dump_json.rst:2
#: 6f62b61a738447a1a941daa5488f6f62
msgid "YearlyFourier.model\\_dump\\_json"
msgstr ""

#: 9dfad0d2fbe049f49f4223fe2df79e6e of
#: pydantic.main.BaseModel.model_dump_json:2
msgid "!!! abstract \"Usage Documentation\""
msgstr ""

#: d9b9eb6650c64ca3aaf1778f8bb457ee of
#: pydantic.main.BaseModel.model_dump_json:3
msgid "[`model_dump_json`](../concepts/serialization.md#modelmodel_dump_json)"
msgstr ""

#: a8adceb7b5a54941b63cfdc0b8e3b388 of
#: pydantic.main.BaseModel.model_dump_json:5
msgid ""
"Generates a JSON representation of the model using Pydantic's `to_json` "
"method."
msgstr ""

#: c0f5a4c22bf64c11a2db56a3c755bd74 of
#: pydantic.main.BaseModel.model_dump_json:7
msgid "Args:"
msgstr ""

#: 5c8d03884b844c25a799a1ba517eb443 of
#: pydantic.main.BaseModel.model_dump_json:8
msgid ""
"indent: Indentation to use in the JSON output. If None is passed, the "
"output will be compact. include: Field(s) to include in the JSON output. "
"exclude: Field(s) to exclude from the JSON output. context: Additional "
"context to pass to the serializer. by_alias: Whether to serialize using "
"field aliases. exclude_unset: Whether to exclude fields that have not "
"been explicitly set. exclude_defaults: Whether to exclude fields that are"
" set to their default value. exclude_none: Whether to exclude fields that"
" have a value of `None`. round_trip: If True, dumped values should be "
"valid as input for non-idempotent types such as Json[T]. warnings: How to"
" handle serialization errors. False/\"none\" ignores them, True/\"warn\" "
"logs errors,"
msgstr ""

#: 043aef9e14154f9eb659dfeb8b1e06d1 of
#: pydantic.main.BaseModel.model_dump_json:18
msgid ""
"\"error\" raises a "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."
msgstr ""

#: 18e6a2768acf44cca335c3b04b128a8c of
#: pydantic.main.BaseModel.model_dump_json:19
msgid ""
"fallback: A function to call when an unknown value is encountered. If not"
" provided,"
msgstr ""

#: 549fc53e7c3140a689d922336d481a71 of
#: pydantic.main.BaseModel.model_dump_json:20
msgid ""
"a "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError] "
"error is raised."
msgstr ""

#: a1bb4cdaa87f4d8aac26b9cc48b2228b of
#: pydantic.main.BaseModel.model_dump_json:21
msgid ""
"serialize_as_any: Whether to serialize fields with duck-typing "
"serialization behavior."
msgstr ""

#: b2413f57d6404aaab40bfea72d1b0c3e of
#: pydantic.main.BaseModel.model_dump_json:23
msgid "Returns:"
msgstr ""

#: 8233fe67cdde400e803a72e8268c8f50 of
#: pydantic.main.BaseModel.model_dump_json:24
msgid "A JSON string representation of the model."
msgstr ""
