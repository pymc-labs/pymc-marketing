# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 11:28+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.scaling.Scaling.model_dump.rst:2
#: 70371b9185464745aa66a641b35bc7cb
msgid "Scaling.model\\_dump"
msgstr "Scaling.model\\_dump"

#: 2fb8c3cfefb54a738408f9735a101c30 of pydantic.main.BaseModel.model_dump:2
msgid "!!! abstract \"Usage Documentation\""
msgstr "!!! abstract \"Documentación de Uso\""

#: d13af8de537c4ffbaabfd6ccf1119b6c of pydantic.main.BaseModel.model_dump:3
msgid "[`model_dump`](../concepts/serialization.md#python-mode)"
msgstr "[`model_dump`](../concepts/serialization.md#python-mode)"

#: b3eab38171c5481db2815d21e88ef21f of pydantic.main.BaseModel.model_dump:5
msgid ""
"Generate a dictionary representation of the model, optionally specifying "
"which fields to include or exclude."
msgstr ""
"Genera una representación en diccionario del modelo, especificando "
"opcionalmente qué campos incluir o excluir."

#: bce0547f3c0643ca90df893cbd4aefd1 of pydantic.main.BaseModel.model_dump:7
msgid "Args:"
msgstr "Args:"

#: fff333b1a2d4480b85cabee620698c22 of pydantic.main.BaseModel.model_dump:8
msgid "mode: The mode in which `to_python` should run."
msgstr "modo: El modo en el que `to_python` debe ejecutarse."

#: 4ebc81a143ef47cfa7dbb6328c5cd2fb of pydantic.main.BaseModel.model_dump:9
msgid ""
"If mode is 'json', the output will only contain JSON serializable types. If "
"mode is 'python', the output may contain non-JSON-serializable Python "
"objects."
msgstr ""
"Si el modo es 'json', la salida solo contendrá tipos serializables en JSON. "
"Si el modo es 'python', la salida puede contener objetos de Python no "
"serializables en JSON."

#: 3247c34f88064eb0b107ae8ee40e0df3 of pydantic.main.BaseModel.model_dump:11
msgid ""
"include: A set of fields to include in the output. exclude: A set of fields "
"to exclude from the output. context: Additional context to pass to the "
"serializer. by_alias: Whether to use the field's alias in the dictionary key"
" if defined. exclude_unset: Whether to exclude fields that have not been "
"explicitly set. exclude_defaults: Whether to exclude fields that are set to "
"their default value. exclude_none: Whether to exclude fields that have a "
"value of `None`. exclude_computed_fields: Whether to exclude computed "
"fields."
msgstr ""
"include: Un conjunto de campos a incluir en la salida. exclude: Un conjunto "
"de campos a excluir de la salida. context: Contexto adicional para pasar al "
"serializador. by_alias: Si se debe utilizar el alias del campo en la clave "
"del diccionario si está definido. exclude_unset: Si se deben excluir los "
"campos que no han sido establecidos explícitamente. exclude_defaults: Si se "
"deben excluir los campos que están establecidos en su valor predeterminado. "
"exclude_none: Si se deben excluir los campos que tienen un valor de `None`. "
"exclude_computed_fields: Si se deben excluir los campos computados."

#: 8c635924bb1a454580397dc79028f831 of pydantic.main.BaseModel.model_dump:19
msgid ""
"While this can be useful for round-tripping, it is usually recommended tu "
"use the dedicated `round_trip` parameter instead."
msgstr ""
"Si bien esto puede ser útil para el intercambio de datos, generalmente se "
"recomienda utilizar el parámetro `round_trip` dedicado en su lugar."

#: 86db06e2414c4b8bb2f9a49585fa211b of pydantic.main.BaseModel.model_dump:21
msgid ""
"round_trip: If True, dumped values should be valid as input for non-"
"idempotent types such as Json[T]. warnings: How to handle serialization "
"errors. False/\"none\" ignores them, True/\"warn\" logs errors,"
msgstr ""
"round_trip: Si es verdadero, los valores volcado deben ser válidos como "
"entrada para tipos no idempotentes como Json[T]. advertencias: Cómo manejar "
"los errores de serialización. Falso/\"ninguno\" los ignora, "
"Verdadero/\"advertir\" registra errores,"

#: aae5b91944fb4087b874ddb66b6b23f2 of pydantic.main.BaseModel.model_dump:23
msgid ""
"\"error\" raises a "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."
msgstr ""
"\"error\" genera un "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."

#: 566055192b82463d911861502294ac7e of pydantic.main.BaseModel.model_dump:24
msgid ""
"fallback: A function to call when an unknown value is encountered. If not "
"provided,"
msgstr ""
"fallback: Una función que se llama cuando se encuentra un valor desconocido."
" Si no se proporciona,"

#: 45d51746bcee4df991cba66d44ce1ec6 of pydantic.main.BaseModel.model_dump:25
msgid ""
"a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError] "
"error is raised."
msgstr ""
"se genera un error de "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."

#: 5a5c4ca5111740c3b1b6c4e5ea4b9ca5 of pydantic.main.BaseModel.model_dump:26
msgid ""
"serialize_as_any: Whether to serialize fields with duck-typing serialization"
" behavior."
msgstr ""
"serialize_as_any: Si se deben serializar los campos con un comportamiento de"
" serialización de tipo pato."

#: 1c1cf05f5d0942329c93ff6730e41753 of pydantic.main.BaseModel.model_dump:28
msgid "Returns:"
msgstr "Devoluciones:"

#: 047cf26182664d36aeb33ef444d1025c of pydantic.main.BaseModel.model_dump:29
msgid "A dictionary representation of the model."
msgstr "Una representación en diccionario del modelo."

#~ msgid "[`model_dump`](../concepts/serialization.md#modelmodel_dump)"
#~ msgstr "[`model_dump`](../concepts/serialization.md#modelmodel_dump)"

#~ msgid ""
#~ "include: A set of fields to include in the output. exclude: A set of fields "
#~ "to exclude from the output. context: Additional context to pass to the "
#~ "serializer. by_alias: Whether to use the field's alias in the dictionary key"
#~ " if defined. exclude_unset: Whether to exclude fields that have not been "
#~ "explicitly set. exclude_defaults: Whether to exclude fields that are set to "
#~ "their default value. exclude_none: Whether to exclude fields that have a "
#~ "value of `None`. round_trip: If True, dumped values should be valid as input"
#~ " for non-idempotent types such as Json[T]. warnings: How to handle "
#~ "serialization errors. False/\"none\" ignores them, True/\"warn\" logs "
#~ "errors,"
#~ msgstr ""
#~ "include: Un conjunto de campos a incluir en la salida. exclude: Un conjunto "
#~ "de campos a excluir de la salida. context: Contexto adicional para pasar al "
#~ "serializador. by_alias: Si se debe usar el alias del campo en la clave del "
#~ "diccionario si está definido. exclude_unset: Si se deben excluir los campos "
#~ "que no han sido establecidos explícitamente. exclude_defaults: Si se deben "
#~ "excluir los campos que están establecidos en su valor predeterminado. "
#~ "exclude_none: Si se deben excluir los campos que tienen un valor de `None`. "
#~ "round_trip: Si es True, los valores volcado deben ser válidos como entrada "
#~ "para tipos no idempotentes como Json[T]. warnings: Cómo manejar los errores "
#~ "de serialización. False/\"none\" los ignora, True/\"warn\" registra errores,"
