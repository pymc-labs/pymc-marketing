# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 11:28+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.fourier.WeeklyFourier.model_json_schema.rst:2
#: 1d844fcf73d14f9aa50441e9446a4b26
msgid "WeeklyFourier.model\\_json\\_schema"
msgstr ""

#: bc5bacfbed3e491b8ce2acab73c045e4 of
#: pydantic.main.BaseModel.model_json_schema:2
msgid "Generates a JSON schema for a model class."
msgstr ""

#: 483817483fc64bbd9fa94525dd0887f2 of
#: pydantic.main.BaseModel.model_json_schema:4
msgid "Args:"
msgstr ""

#: 3435bc66a719445cb46e40b8772613a7 of
#: pydantic.main.BaseModel.model_json_schema:5
msgid ""
"by_alias: Whether to use attribute aliases or not. ref_template: The "
"reference template. union_format: The format to use when combining "
"schemas from unions together. Can be one of:"
msgstr ""

#: 80295b85dd2b46acbeace2cbf38c4a33 of
#: pydantic.main.BaseModel.model_json_schema:9
msgid ""
"`'any_of'`: Use the [`anyOf`](https://json-schema.org/understanding-json-"
"schema/reference/combining#anyOf)"
msgstr ""

#: 6357c6f5ae3a45858ef6d0c98209fdcb of
#: pydantic.main.BaseModel.model_json_schema:10
msgid ""
"keyword to combine schemas (the default). - `'primitive_type_array'`: Use"
" the [`type`](https://json-schema.org/understanding-json-"
"schema/reference/type) keyword as an array of strings, containing each "
"type of the combination. If any of the schemas is not a primitive type "
"(`string`, `boolean`, `null`, `integer` or `number`) or contains "
"constraints/metadata, falls back to `any_of`."
msgstr ""

#: 3f2307033bcd47dd9e973566920cb17c of
#: pydantic.main.BaseModel.model_json_schema:15
msgid ""
"schema_generator: To override the logic used to generate the JSON schema,"
" as a subclass of"
msgstr ""

#: dcd6897fed1841cd8c73165d50363e17 of
#: pydantic.main.BaseModel.model_json_schema:16
msgid "`GenerateJsonSchema` with your desired modifications"
msgstr ""

#: 1c894d91ab1144c2b27d248d44525077 of
#: pydantic.main.BaseModel.model_json_schema:17
msgid "mode: The mode in which to generate the schema."
msgstr ""

#: 66effcb1294041c9b4d1e798537a631f of
#: pydantic.main.BaseModel.model_json_schema:19
msgid "Returns:"
msgstr ""

#: 42c79b404ab14498a97602fd51d1065a of
#: pydantic.main.BaseModel.model_json_schema:20
msgid "The JSON schema for the given model class."
msgstr ""

#~ msgid ""
#~ "by_alias: Whether to use attribute "
#~ "aliases or not. ref_template: The "
#~ "reference template. schema_generator: To "
#~ "override the logic used to generate "
#~ "the JSON schema, as a subclass of"
#~ msgstr ""
