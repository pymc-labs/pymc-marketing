# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 11:28+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.hsgp.HSGPBase.model_json_schema.rst:2
#: 8625b46791c34aa5a4160ded4f6c00b6
msgid "HSGPBase.model\\_json\\_schema"
msgstr "HSGPBase.modelo\\_json\\_esquema"

#: 552e3f6303204ed9bf9dd03933049908 of
#: pydantic.main.BaseModel.model_json_schema:2
msgid "Generates a JSON schema for a model class."
msgstr "Genera un esquema JSON para una clase de modelo."

#: 1c39c98775f546ed9b2e7bd4176a2f70 of
#: pydantic.main.BaseModel.model_json_schema:4
msgid "Args:"
msgstr "Args:"

#: 2b5e16e7992b4a2e926cc1959fc26d4e of
#: pydantic.main.BaseModel.model_json_schema:5
msgid ""
"by_alias: Whether to use attribute aliases or not. ref_template: The "
"reference template. union_format: The format to use when combining schemas "
"from unions together. Can be one of:"
msgstr ""
"by_alias: Si se deben utilizar alias de atributos o no. ref_template: La "
"plantilla de referencia. union_format: El formato a utilizar al combinar "
"esquemas de uniones. Puede ser uno de:"

#: 48e285be67214e08ac4a4803c629fca4 of
#: pydantic.main.BaseModel.model_json_schema:9
msgid ""
"`'any_of'`: Use the [`anyOf`](https://json-schema.org/understanding-json-"
"schema/reference/combining#anyOf)"
msgstr ""
"'any_of': Utilice el [`anyOf`](https://json-schema.org/understanding-json-"
"schema/reference/combining#anyOf)"

#: bdda25a0c8364b58bc1484c9847fca9f of
#: pydantic.main.BaseModel.model_json_schema:10
msgid ""
"keyword to combine schemas (the default). - `'primitive_type_array'`: Use "
"the [`type`](https://json-schema.org/understanding-json-"
"schema/reference/type) keyword as an array of strings, containing each type "
"of the combination. If any of the schemas is not a primitive type (`string`,"
" `boolean`, `null`, `integer` or `number`) or contains constraints/metadata,"
" falls back to `any_of`."
msgstr ""
"palabra clave para combinar esquemas (el predeterminado). - "
"`'primitive_type_array'`: Utilice la palabra clave [`type`](https://json-"
"schema.org/understanding-json-schema/reference/type) como un array de "
"cadenas, que contenga cada tipo de la combinación. Si alguno de los esquemas"
" no es un tipo primitivo (`string`, `boolean`, `null`, `integer` o `number`)"
" o contiene restricciones/metadatos, se retrocede a `any_of`."

#: 39aa201728e2463880af30902d7f0968 of
#: pydantic.main.BaseModel.model_json_schema:15
msgid ""
"schema_generator: To override the logic used to generate the JSON schema, as"
" a subclass of"
msgstr ""
"schema_generator: Para anular la lógica utilizada para generar el esquema "
"JSON, como una subclase de"

#: 4e66e61f3353451f82c05dc2a8b00d71 of
#: pydantic.main.BaseModel.model_json_schema:16
msgid "`GenerateJsonSchema` with your desired modifications"
msgstr "GenerarJsonEsquema con las modificaciones deseadas"

#: 738ceed2d22744b8a024ceabfe581867 of
#: pydantic.main.BaseModel.model_json_schema:17
msgid "mode: The mode in which to generate the schema."
msgstr "modo: El modo en el que generar el esquema."

#: a7a5bbbed53d4d6dbacfc6ce6ac2bb94 of
#: pydantic.main.BaseModel.model_json_schema:19
msgid "Returns:"
msgstr "Devoluciones:"

#: 3dee8fc341ce4f14a204429f693ce867 of
#: pydantic.main.BaseModel.model_json_schema:20
msgid "The JSON schema for the given model class."
msgstr "El esquema JSON para la clase de modelo dada."

#~ msgid ""
#~ "by_alias: Whether to use attribute aliases or not. ref_template: The "
#~ "reference template. schema_generator: To override the logic used to generate"
#~ " the JSON schema, as a subclass of"
#~ msgstr ""
#~ "by_alias: Si se deben utilizar alias de atributos o no. ref_template: La "
#~ "plantilla de referencia. schema_generator: Para anular la lógica utilizada "
#~ "para generar el esquema JSON, como una subclase de"
