# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.fourier.FourierBase.model_parametrized_name.rst:2
#: 5080275d8ed14acdbfabb001112483c8
msgid "FourierBase.model\\_parametrized\\_name"
msgstr ""

#: 9ef3707630054a41a1363f2dce8c5f8a of
#: pydantic.main.BaseModel.model_parametrized_name:2
msgid "Compute the class name for parametrizations of generic classes."
msgstr ""

#: 5689cd48de2b4d73a8c81fa17affea69 of
#: pydantic.main.BaseModel.model_parametrized_name:4
msgid ""
"This method can be overridden to achieve a custom naming scheme for "
"generic BaseModels."
msgstr ""

#: d02b1b3feda34a0d87f9668f773cd310 of
#: pydantic.main.BaseModel.model_parametrized_name:6
msgid "Args:"
msgstr ""

#: ba8944495e2e49928c18c7246114ef8f of
#: pydantic.main.BaseModel.model_parametrized_name:7
msgid "params: Tuple of types of the class. Given a generic class"
msgstr ""

#: 53c95d8971fc4e2ea44ecdeaf6c1fd85 of
#: pydantic.main.BaseModel.model_parametrized_name:8
msgid ""
"`Model` with 2 type variables and a concrete model `Model[str, int]`, the"
" value `(str, int)` would be passed to `params`."
msgstr ""

#: 13f4af112b1d4de1a1cc3c7314673bea of
#: pydantic.main.BaseModel.model_parametrized_name:11
msgid "Returns:"
msgstr ""

#: 18cb778f7df74a759d8f05137f8b71ff of
#: pydantic.main.BaseModel.model_parametrized_name:12
msgid ""
"String representing the new class where `params` are passed to `cls` as "
"type variables."
msgstr ""

#: bd9a927c7a164821b38efd0a71a7bf5b of
#: pydantic.main.BaseModel.model_parametrized_name:14
msgid "Raises:"
msgstr ""

#: 673000cf94e4415fb128dd9716faa03a of
#: pydantic.main.BaseModel.model_parametrized_name:15
msgid ""
"TypeError: Raised when trying to generate concrete names for non-generic "
"models."
msgstr ""
