# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.events.EventEffect.model_dump_json.rst:2
#: 11dad0ac3fb049da922f0049fad685f9
msgid "EventEffect.model\\_dump\\_json"
msgstr ""

#: fa3da72bff27475b8537dc15bbf2d339 of
#: pydantic.main.BaseModel.model_dump_json:2
msgid "!!! abstract \"Usage Documentation\""
msgstr ""

#: fe5c121ceb9b456c8a86bff0b23ab83e of
#: pydantic.main.BaseModel.model_dump_json:3
msgid "[`model_dump_json`](../concepts/serialization.md#modelmodel_dump_json)"
msgstr ""

#: f1d1696a5c90449b9c0b50112a3438f6 of
#: pydantic.main.BaseModel.model_dump_json:5
msgid ""
"Generates a JSON representation of the model using Pydantic's `to_json` "
"method."
msgstr ""

#: a8913a5ac183467a86f8e772f8de2235 of
#: pydantic.main.BaseModel.model_dump_json:7
msgid "Args:"
msgstr ""

#: 42a7d2572a7349fc926485e70d54dc7d of
#: pydantic.main.BaseModel.model_dump_json:8
msgid ""
"indent: Indentation to use in the JSON output. If None is passed, the "
"output will be compact. include: Field(s) to include in the JSON output. "
"exclude: Field(s) to exclude from the JSON output. context: Additional "
"context to pass to the serializer. by_alias: Whether to serialize using "
"field aliases. exclude_unset: Whether to exclude fields that have not "
"been explicitly set. exclude_defaults: Whether to exclude fields that are"
" set to their default value. exclude_none: Whether to exclude fields that"
" have a value of `None`. round_trip: If True, dumped values should be "
"valid as input for non-idempotent types such as Json[T]. warnings: How to"
" handle serialization errors. False/\"none\" ignores them, True/\"warn\" "
"logs errors,"
msgstr ""

#: 37a2224dc96649fb8d7755317eab5dae of
#: pydantic.main.BaseModel.model_dump_json:18
msgid ""
"\"error\" raises a "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."
msgstr ""

#: 1bbbb1311cb0451581d6a8aaa719a687 of
#: pydantic.main.BaseModel.model_dump_json:19
msgid ""
"fallback: A function to call when an unknown value is encountered. If not"
" provided,"
msgstr ""

#: f66013f61a474c118e5a4bfd77d66cfc of
#: pydantic.main.BaseModel.model_dump_json:20
msgid ""
"a "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError] "
"error is raised."
msgstr ""

#: 499db8b8721b4f009e2e8685cc8ce7fc of
#: pydantic.main.BaseModel.model_dump_json:21
msgid ""
"serialize_as_any: Whether to serialize fields with duck-typing "
"serialization behavior."
msgstr ""

#: a1a7df5ae533495fb8d1071b39ef8fd0 of
#: pydantic.main.BaseModel.model_dump_json:23
msgid "Returns:"
msgstr ""

#: 75f11efd0fd54d21b3203df13683a106 of
#: pydantic.main.BaseModel.model_dump_json:24
msgid "A JSON string representation of the model."
msgstr ""
