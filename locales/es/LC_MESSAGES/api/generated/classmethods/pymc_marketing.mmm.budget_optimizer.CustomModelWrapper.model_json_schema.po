# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 09:54+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.budget_optimizer.CustomModelWrapper.model_json_schema.rst:2
#: d8b17ed671fd41c0a2d748c639cdf7a5
msgid "CustomModelWrapper.model\\_json\\_schema"
msgstr "CustomModelWrapper.model\\_json\\_schema"

#: 0561b352a28f4f40a620bcbe2e47c520 of
#: pydantic.main.BaseModel.model_json_schema:2
msgid "Generates a JSON schema for a model class."
msgstr "Genera un esquema JSON para una clase de modelo."

#: 6f98056b7cdd4fd58060935df7fc6571 of
#: pydantic.main.BaseModel.model_json_schema:4
msgid "Args:"
msgstr "Args:"

#: 625fe5d7aec44350a93690021ef23ed7 of
#: pydantic.main.BaseModel.model_json_schema:5
msgid ""
"by_alias: Whether to use attribute aliases or not. ref_template: The "
"reference template. union_format: The format to use when combining schemas "
"from unions together. Can be one of:"
msgstr ""
"msgid: by_alias: Whether to use attribute aliases or not. \n"
"msgstr: by_alias: Si se deben usar alias de atributos o no. \n"
"\n"
"msgid: ref_template: The reference template. \n"
"msgstr: ref_template: La plantilla de referencia. \n"
"\n"
"msgid: union_format: The format to use when combining schemas from unions together. Can be one of: \n"
"msgstr: union_format: El formato a utilizar al combinar esquemas de uniones. Puede ser uno de:"

#: ce1874084e10470cadbade78fbb69dc5 of
#: pydantic.main.BaseModel.model_json_schema:9
msgid ""
"`'any_of'`: Use the [`anyOf`](https://json-schema.org/understanding-json-"
"schema/reference/combining#anyOf)"
msgstr ""
"`'any_of'`: Utilice el [`anyOf`](https://json-schema.org/understanding-json-"
"schema/reference/combining#anyOf)"

#: e04a35e38d5d4d5ca69e24a33d2a36ac of
#: pydantic.main.BaseModel.model_json_schema:10
msgid ""
"keyword to combine schemas (the default). - `'primitive_type_array'`: Use "
"the [`type`](https://json-schema.org/understanding-json-"
"schema/reference/type) keyword as an array of strings, containing each type "
"of the combination. If any of the schemas is not a primitive type (`string`,"
" `boolean`, `null`, `integer` or `number`) or contains constraints/metadata,"
" falls back to `any_of`."
msgstr ""
"msgid: keyword to combine schemas (the default). - `'primitive_type_array'`: Use the [`type`](https://json-schema.org/understanding-json-schema/reference/type) keyword as an array of strings, containing each type of the combination. If any of the schemas is not a primitive type (`string`, `boolean`, `null`, `integer` or `number`) or contains constraints/metadata, falls back to `any_of`.  \n"
"msgstr: palabra clave para combinar esquemas (el predeterminado). - `'primitive_type_array'`: Utilice la palabra clave [`type`](https://json-schema.org/understanding-json-schema/reference/type) como un array de cadenas, que contenga cada tipo de la combinaci칩n. Si alguno de los esquemas no es un tipo primitivo (`string`, `boolean`, `null`, `integer` o `number`) o contiene restricciones/metadatos, se revertir치 a `any_of`."

#: 91baef4e799e47ca9ffbb333d037afa8 of
#: pydantic.main.BaseModel.model_json_schema:15
msgid ""
"schema_generator: To override the logic used to generate the JSON schema, as"
" a subclass of"
msgstr ""
"msgid: schema_generator: To override the logic used to generate the JSON schema, as a subclass of  \n"
"msgstr: schema_generator: Para anular la l칩gica utilizada para generar el esquema JSON, como una subclase de"

#: 8a52a7b8dc474bb685973ae62129fb6f of
#: pydantic.main.BaseModel.model_json_schema:16
msgid "`GenerateJsonSchema` with your desired modifications"
msgstr ""
"msgid: `GenerateJsonSchema` with your desired modifications  \n"
"msgstr: `GenerateJsonSchema` con las modificaciones deseadas"

#: 0e20a718ae9243e6abba08709b55f038 of
#: pydantic.main.BaseModel.model_json_schema:17
msgid "mode: The mode in which to generate the schema."
msgstr ""
"msgid: mode: The mode in which to generate the schema.  \n"
"msgstr: modo: El modo en el que se generar치 el esquema."

#: 215b2db9a4b140a9bd9c802179702c17 of
#: pydantic.main.BaseModel.model_json_schema:19
msgid "Returns:"
msgstr "Returns:"

#: 6e665c48e58a4d098686a656eb24d589 of
#: pydantic.main.BaseModel.model_json_schema:20
msgid "The JSON schema for the given model class."
msgstr ""
"msgid: The JSON schema for the given model class.\n"
"msgstr: El esquema JSON para la clase de modelo dada."
