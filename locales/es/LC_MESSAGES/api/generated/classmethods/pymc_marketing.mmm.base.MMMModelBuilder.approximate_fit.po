# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.base.MMMModelBuilder.approximate_fit.rst:2
#: a038cd9957214014891274126e10dd39
msgid "MMMModelBuilder.approximate\\_fit"
msgstr ""

#: e286716ca37e4824ad59bd3d45356442 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:2
msgid "Fit a model using Variational Inference and return InferenceData."
msgstr ""

#: e48b194d41d14adc8836413cc2b7188b of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:4
msgid ""
"This performs variational inference via `pymc.fit`, then draws posterior "
"samples from the fitted approximation via `Approximation.sample`, "
"returning an `arviz.InferenceData` compatible with the rest of the API "
"(same structure as `.fit`)."
msgstr ""

#: 0a116f4f58844e60a318e1b381e763ad of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit
msgid "Parameters"
msgstr ""

#: e0ec2b301d3f447cb6ffed657138e7ea of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:10
msgid ""
"**X** : :term:`numpy:array_like` | :obj:`array <numpy.ndarray>`, "
":obj:`shape` (:obj:`n_obs`, :obj:`n_features`)"
msgstr ""

#: dac8b7d7a4b4413aba57c171d0245e31 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:9
msgid "numpy:array_like | array, shape (n_obs, n_features)"
msgstr ""

#: 71bdcab1acb540c89c11ab9d44fa56a3 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:11
msgid ""
"The training input samples. If scikit-learn is available, array-like, "
"otherwise array."
msgstr ""

#: ff0463a2ee2242be90a66844b53e979e of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:13
msgid ""
"**y** : :term:`numpy:array_like` | :obj:`array <numpy.ndarray>`, "
":obj:`shape` (n_obs,)"
msgstr ""

#: 78aed6d26deb4733bda673aa2fb7417a of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:12
msgid "numpy:array_like | array, shape (n_obs,)"
msgstr ""

#: 441494398854450c8bb628067226804c of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:14
msgid ""
"The target values (real numbers). If scikit-learn is available, array-"
"like, otherwise array."
msgstr ""

#: 4afb811a81e3467abed38fb91c0c28b8 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:16
msgid "**progressbar** : :ref:`bool <python:bltin-boolean-values>`, optional"
msgstr ""

#: bc651a452e56473faf4e47d99e232ab0 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:15
msgid "bool, optional"
msgstr ""

#: aa318b2de1b64773af0664667c25071d of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:17
msgid ""
"Specifies whether the fitting/sample progress bar should be displayed. "
"Defaults to True."
msgstr ""

#: 9ae1394675324e518bce8b1294f74531 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:19
msgid ""
"**random_seed** : :obj:`Optional`\\[:obj:`RandomState "
"<numpy.random.RandomState>`]"
msgstr ""

#: 7c260967cc894292a96d6200fb911355 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:18
msgid "Optional[RandomState]"
msgstr ""

#: 49daab29878249288b5b90934ebea3aa of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:20
msgid ""
"Provides stochastic procedures with initial random seed for "
"reproducibility."
msgstr ""

#: 618c9bd8e71747ab82a0e208b5a2df68 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:22
msgid "**fit_kwargs** : :class:`python:dict`, optional"
msgstr ""

#: 0cc655721fc4456481f19861aa0d57f8 9dd514754a684dbfbe397edc62fd6571 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:21
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:24
msgid "python:dict, optional"
msgstr ""

#: ce527bc1529947c398833818a1cfd167 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:23
#, python-brace-format
msgid ""
"Extra keyword arguments forwarded to `pymc.fit` (e.g., {\"n\": 10_000, "
"\"method\": \"advi\"})."
msgstr ""

#: b19eeae9619a490284d7a957d13272af of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:25
msgid "**sample_kwargs** : :class:`python:dict`, optional"
msgstr ""

#: b25fff41b0424ed0be4cbab1397f09c1 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:26
#, python-brace-format
msgid ""
"Extra keyword arguments forwarded to `Approximation.sample` (e.g., "
"{\"draws\": 1_000})."
msgstr ""

#: 26a77b1aca204c81a3995238677bf5b3 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit
msgid "Returns"
msgstr ""

#: 7d3ccb1f7b04476cae088ce360d0155a of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:32
msgid ":obj:`az.InferenceData`"
msgstr ""

#: ad207d07d4cd4b7990b2a1b3d0cdae90 of
#: pymc_marketing.model_builder.RegressionModelBuilder.approximate_fit:33
msgid "Inference data of the variationally fitted model."
msgstr ""
