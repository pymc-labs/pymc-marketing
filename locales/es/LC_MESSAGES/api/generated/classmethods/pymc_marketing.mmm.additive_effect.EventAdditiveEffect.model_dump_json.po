# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-13 11:28+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.additive_effect.EventAdditiveEffect.model_dump_json.rst:2
#: 27037370a5da41c5b1a6ec9069f07257
msgid "EventAdditiveEffect.model\\_dump\\_json"
msgstr "EventAdditiveEffect.model\\_dump\\_json"

#: 5f6d0e6264124d2dadbebf987f8818c2 of
#: pydantic.main.BaseModel.model_dump_json:2
msgid "!!! abstract \"Usage Documentation\""
msgstr "!!! abstract \"Documentación de Uso\""

#: c31e62f5f0264c61b9c3493c03fed964 of
#: pydantic.main.BaseModel.model_dump_json:3
msgid "[`model_dump_json`](../concepts/serialization.md#json-mode)"
msgstr "[`model_dump_json`](../concepts/serialization.md#json-mode)"

#: 67174b54841541e288867c3ae25d2e0a of
#: pydantic.main.BaseModel.model_dump_json:5
msgid ""
"Generates a JSON representation of the model using Pydantic's `to_json` "
"method."
msgstr ""
"Genera una representación JSON del modelo utilizando el método `to_json` de "
"Pydantic."

#: b92df006e0364c09b82f48a1064fffc3 of
#: pydantic.main.BaseModel.model_dump_json:7
msgid "Args:"
msgstr "Args:"

#: 4c1814f201784672839ca8c72e83ffc1 of
#: pydantic.main.BaseModel.model_dump_json:8
msgid ""
"indent: Indentation to use in the JSON output. If None is passed, the output"
" will be compact. ensure_ascii: If `True`, the output is guaranteed to have "
"all incoming non-ASCII characters escaped."
msgstr ""
"indent: Sangría a utilizar en la salida JSON. Si se pasa None, la salida "
"será compacta. ensure_ascii: Si es `True`, se garantiza que la salida tendrá"
" todos los caracteres no ASCII entrantes escapados."

#: 0f0df63037dc4671a7e7cee3438dac20 of
#: pydantic.main.BaseModel.model_dump_json:10
msgid "If `False` (the default), these characters will be output as-is."
msgstr ""
"Si `False` (el valor predeterminado), estos caracteres se mostrarán tal como"
" están."

#: e384a71f83b8402ca5cd5214ddd066a0 of
#: pydantic.main.BaseModel.model_dump_json:11
msgid ""
"include: Field(s) to include in the JSON output. exclude: Field(s) to "
"exclude from the JSON output. context: Additional context to pass to the "
"serializer. by_alias: Whether to serialize using field aliases. "
"exclude_unset: Whether to exclude fields that have not been explicitly set. "
"exclude_defaults: Whether to exclude fields that are set to their default "
"value. exclude_none: Whether to exclude fields that have a value of `None`. "
"exclude_computed_fields: Whether to exclude computed fields."
msgstr ""
"incluir: Campo(s) a incluir en la salida JSON. excluir: Campo(s) a excluir "
"de la salida JSON. contexto: Contexto adicional para pasar al serializador. "
"por_alias: Si se debe serializar utilizando alias de campo. "
"excluir_no_establecidos: Si se deben excluir campos que no han sido "
"establecidos explícitamente. excluir_valores_por_defecto: Si se deben "
"excluir campos que están establecidos en su valor por defecto. "
"excluir_ninguno: Si se deben excluir campos que tienen un valor de `None`. "
"excluir_campos_computados: Si se deben excluir campos computados."

#: 14bc50ec0f504b468ecc438b7fc0c943 of
#: pydantic.main.BaseModel.model_dump_json:19
msgid ""
"While this can be useful for round-tripping, it is usually recommended to "
"use the dedicated `round_trip` parameter instead."
msgstr ""
"Si bien esto puede ser útil para el intercambio de datos, generalmente se "
"recomienda utilizar el parámetro dedicado `round_trip` en su lugar."

#: 34c71ac5c828415a9512a6f50ff7ea5c of
#: pydantic.main.BaseModel.model_dump_json:21
msgid ""
"round_trip: If True, dumped values should be valid as input for non-"
"idempotent types such as Json[T]. warnings: How to handle serialization "
"errors. False/\"none\" ignores them, True/\"warn\" logs errors,"
msgstr ""
"round_trip: Si es verdadero, los valores volcado deben ser válidos como "
"entrada para tipos no idempotentes como Json[T]. advertencias: Cómo manejar "
"errores de serialización. Falso/\"ninguno\" los ignora, "
"Verdadero/\"advertir\" registra errores,"

#: 026ca2cffc3e40cc85bd7fd413a9185b of
#: pydantic.main.BaseModel.model_dump_json:23
msgid ""
"\"error\" raises a "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."
msgstr ""
"\"error\" genera un "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."

#: fa3fb9878ca64966a9afcfefd933866b of
#: pydantic.main.BaseModel.model_dump_json:24
msgid ""
"fallback: A function to call when an unknown value is encountered. If not "
"provided,"
msgstr ""
"fallback: Una función que se llama cuando se encuentra un valor desconocido."
" Si no se proporciona,"

#: 6f05324f18a4435486c979f253ce5c49 of
#: pydantic.main.BaseModel.model_dump_json:25
msgid ""
"a [`PydanticSerializationError`][pydantic_core.PydanticSerializationError] "
"error is raised."
msgstr ""
"se genera un error de "
"[`PydanticSerializationError`][pydantic_core.PydanticSerializationError]."

#: 9d7c9e5ff3214255941328084041618c of
#: pydantic.main.BaseModel.model_dump_json:26
msgid ""
"serialize_as_any: Whether to serialize fields with duck-typing serialization"
" behavior."
msgstr ""
"serialize_as_any: Si se deben serializar los campos con un comportamiento de"
" serialización de tipo pato."

#: 67643595abc24281a4c2f19e0c4f795b of
#: pydantic.main.BaseModel.model_dump_json:28
msgid "Returns:"
msgstr "Devoluciones:"

#: ee273861eebd4661b7a04f5de74582dd of
#: pydantic.main.BaseModel.model_dump_json:29
msgid "A JSON string representation of the model."
msgstr "Una representación de cadena JSON del modelo."

#~ msgid "[`model_dump_json`](../concepts/serialization.md#modelmodel_dump_json)"
#~ msgstr ""
#~ "[`model_dump_json`](../concepts/serialization.md#modelmodel_dump_json)"

#~ msgid ""
#~ "indent: Indentation to use in the JSON output. If None is passed, the output"
#~ " will be compact. include: Field(s) to include in the JSON output. exclude: "
#~ "Field(s) to exclude from the JSON output. context: Additional context to "
#~ "pass to the serializer. by_alias: Whether to serialize using field aliases. "
#~ "exclude_unset: Whether to exclude fields that have not been explicitly set. "
#~ "exclude_defaults: Whether to exclude fields that are set to their default "
#~ "value. exclude_none: Whether to exclude fields that have a value of `None`. "
#~ "round_trip: If True, dumped values should be valid as input for non-"
#~ "idempotent types such as Json[T]. warnings: How to handle serialization "
#~ "errors. False/\"none\" ignores them, True/\"warn\" logs errors,"
#~ msgstr ""
#~ "indent: Sangría a utilizar en la salida JSON. Si se pasa None, la salida "
#~ "será compacta. include: Campo(s) a incluir en la salida JSON. exclude: "
#~ "Campo(s) a excluir de la salida JSON. context: Contexto adicional para pasar"
#~ " al serializador. by_alias: Si se debe serializar utilizando alias de campo."
#~ " exclude_unset: Si se deben excluir campos que no han sido establecidos "
#~ "explícitamente. exclude_defaults: Si se deben excluir campos que están "
#~ "establecidos en su valor predeterminado. exclude_none: Si se deben excluir "
#~ "campos que tienen un valor de `None`. round_trip: Si es True, los valores "
#~ "volcados deben ser válidos como entrada para tipos no idempotentes como "
#~ "Json[T]. warnings: Cómo manejar errores de serialización. False/\"none\" los"
#~ " ignora, True/\"warn\" registra errores,"
