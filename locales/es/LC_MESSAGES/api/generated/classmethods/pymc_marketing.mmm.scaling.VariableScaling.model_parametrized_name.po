# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.scaling.VariableScaling.model_parametrized_name.rst:2
#: 7e11c92c7fc44deab03af191e7cd36c5
msgid "VariableScaling.model\\_parametrized\\_name"
msgstr "VariableScaling.nombre\\_parametrizado\\_del\\_modelo"

#: f8e6c3c91f284e0a841828db14c512e7 of
#: pydantic.main.BaseModel.model_parametrized_name:2
msgid "Compute the class name for parametrizations of generic classes."
msgstr ""
"Calcule el nombre de la clase para parametrizaciones de clases genéricas."

#: a997994333a74b9ea61580a60ac691b0 of
#: pydantic.main.BaseModel.model_parametrized_name:4
msgid ""
"This method can be overridden to achieve a custom naming scheme for generic "
"BaseModels."
msgstr ""
"Este método se puede sobrescribir para lograr un esquema de nomenclatura "
"personalizado para los BaseModels genéricos."

#: 951bc560ed8c412f988508d20f761337 of
#: pydantic.main.BaseModel.model_parametrized_name:6
msgid "Args:"
msgstr "Args:"

#: 28e40fd925c84b81be200ed90a202159 of
#: pydantic.main.BaseModel.model_parametrized_name:7
msgid "params: Tuple of types of the class. Given a generic class"
msgstr "params: Tupla de tipos de la clase. Dada una clase genérica"

#: 6a7e47c8215945069ece1892188f1344 of
#: pydantic.main.BaseModel.model_parametrized_name:8
msgid ""
"`Model` with 2 type variables and a concrete model `Model[str, int]`, the "
"value `(str, int)` would be passed to `params`."
msgstr ""
"`Modelo` con 2 variables de tipo y un modelo concreto `Modelo[str, int]`, el"
" valor `(str, int)` se pasaría a `params`."

#: 15e0c87e6fde4545a67b86389ab84d3e of
#: pydantic.main.BaseModel.model_parametrized_name:11
msgid "Returns:"
msgstr "Devoluciones:"

#: 9a959bb7e3ad4d4c91cea278272e91cc of
#: pydantic.main.BaseModel.model_parametrized_name:12
msgid ""
"String representing the new class where `params` are passed to `cls` as type"
" variables."
msgstr ""
"Cadena que representa la nueva clase donde `params` se pasan a `cls` como "
"variables de tipo."

#: cad26c9a62d346ae856832886a90b83a of
#: pydantic.main.BaseModel.model_parametrized_name:14
msgid "Raises:"
msgstr "Aumentos:"

#: 772f554348a245078cbbcdb28163a54a of
#: pydantic.main.BaseModel.model_parametrized_name:15
msgid ""
"TypeError: Raised when trying to generate concrete names for non-generic "
"models."
msgstr ""
"TypeError: Se genera al intentar crear nombres concretos para modelos no "
"genéricos."
