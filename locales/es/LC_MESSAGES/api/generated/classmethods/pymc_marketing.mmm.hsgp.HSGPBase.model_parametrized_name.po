# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.hsgp.HSGPBase.model_parametrized_name.rst:2
#: bfd4899a3c74414498675c1027f4672b
msgid "HSGPBase.model\\_parametrized\\_name"
msgstr "HSGPBase.nombre\\_parametrizado\\_del\\_modelo"

#: 53309e24c04a4eeca0d70020f6f744fa of
#: pydantic.main.BaseModel.model_parametrized_name:2
msgid "Compute the class name for parametrizations of generic classes."
msgstr ""
"Calcule el nombre de la clase para parametrizaciones de clases genéricas."

#: 1c90a05a717e46119a5f4dddc52c6489 of
#: pydantic.main.BaseModel.model_parametrized_name:4
msgid ""
"This method can be overridden to achieve a custom naming scheme for generic "
"BaseModels."
msgstr ""
"Este método se puede anular para lograr un esquema de nomenclatura "
"personalizado para BaseModels genéricos."

#: 88b17730e92a466b9b7643977fc38c67 of
#: pydantic.main.BaseModel.model_parametrized_name:6
msgid "Args:"
msgstr "Args:"

#: 0f6f5a0f53924ff79e7a96a27a43ba7d of
#: pydantic.main.BaseModel.model_parametrized_name:7
msgid "params: Tuple of types of the class. Given a generic class"
msgstr "params: Tupla de tipos de la clase. Dada una clase genérica"

#: db08d3b8ca8542b39ef6bac2b7aaa7e0 of
#: pydantic.main.BaseModel.model_parametrized_name:8
msgid ""
"`Model` with 2 type variables and a concrete model `Model[str, int]`, the "
"value `(str, int)` would be passed to `params`."
msgstr ""
"`Modelo` con 2 variables de tipo y un modelo concreto `Modelo[str, int]`, el"
" valor `(str, int)` se pasaría a `params`."

#: 154bbcfb81ad419d844d225c4387cdda of
#: pydantic.main.BaseModel.model_parametrized_name:11
msgid "Returns:"
msgstr "Devoluciones:"

#: a86d6269ace447ca92960dc10c6417ee of
#: pydantic.main.BaseModel.model_parametrized_name:12
msgid ""
"String representing the new class where `params` are passed to `cls` as type"
" variables."
msgstr ""
"Cadena que representa la nueva clase donde `params` se pasan a `cls` como "
"variables de tipo."

#: 197d327736e24516a9b1553221ed222a of
#: pydantic.main.BaseModel.model_parametrized_name:14
msgid "Raises:"
msgstr "Aumentos:"

#: 5d81703ac50849e5894a98bbf435db52 of
#: pydantic.main.BaseModel.model_parametrized_name:15
msgid ""
"TypeError: Raised when trying to generate concrete names for non-generic "
"models."
msgstr ""
"TypeError: Se genera al intentar crear nombres concretos para modelos no "
"genéricos."
