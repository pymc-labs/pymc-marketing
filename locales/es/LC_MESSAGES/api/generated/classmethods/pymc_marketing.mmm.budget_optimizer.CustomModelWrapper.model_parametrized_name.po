# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-21 09:54+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.mmm.budget_optimizer.CustomModelWrapper.model_parametrized_name.rst:2
#: 42c0fd04de784bdb9a59c01368137950
msgid "CustomModelWrapper.model\\_parametrized\\_name"
msgstr ""
"{\n"
"  \"singular\": \"CustomModelWrapper.model_parametrized_name\",\n"
"  \"plural\": \"CustomModelWrapper.model_parametrized_name\"\n"
"}"

#: 488105b697a7453a9260945c84e71ead of
#: pydantic.main.BaseModel.model_parametrized_name:2
msgid "Compute the class name for parametrizations of generic classes."
msgstr ""
"{\n"
"  \"singular\": \"Calcule el nombre de la clase para parametrizaciones de clases genéricas.\",\n"
"  \"plural\": \"Calcule los nombres de las clases para parametrizaciones de clases genéricas.\"\n"
"}"

#: d7644280cf804a488045d5d19636c25f of
#: pydantic.main.BaseModel.model_parametrized_name:4
msgid ""
"This method can be overridden to achieve a custom naming scheme for generic "
"BaseModels."
msgstr ""
"{\n"
"  \"singular\": \"Este método puede ser anulado para lograr un esquema de nombres personalizado para BaseModels genéricos.\",\n"
"  \"plural\": \"Este método puede ser anulado para lograr esquemas de nombres personalizados para BaseModels genéricos.\"\n"
"}"

#: a155519fa84b47ca8906798a76b5ebca of
#: pydantic.main.BaseModel.model_parametrized_name:6
msgid "Args:"
msgstr ""
"{\n"
"  \"singular\": {\n"
"    \"msgid\": \"Args:\",\n"
"    \"msgstr\": \"Args:\"\n"
"  },\n"
"  \"plural\": {\n"
"    \"msgid\": \"Args:\",\n"
"    \"msgstr\": \"Args:\"\n"
"  }\n"
"}"

#: 8c580ee4bdcb4043b5765d280faca2ae of
#: pydantic.main.BaseModel.model_parametrized_name:7
msgid "params: Tuple of types of the class. Given a generic class"
msgstr ""
"{\n"
"  \"singular\": {\n"
"    \"msgid\": \"params: Tuple of types of the class. Given a generic class\",\n"
"    \"msgstr\": \"params: Tupla de tipos de la clase. Dada una clase genérica\"\n"
"  },\n"
"  \"plural\": {\n"
"    \"msgid\": \"params: Tuple of types of the class. Given a generic class\",\n"
"    \"msgstr\": \"params: Tupla de tipos de la clase. Dada una clase genérica\"\n"
"  }\n"
"}"

#: 7293170d9c114bdcaec0b590a2f4ff64 of
#: pydantic.main.BaseModel.model_parametrized_name:8
msgid ""
"`Model` with 2 type variables and a concrete model `Model[str, int]`, the "
"value `(str, int)` would be passed to `params`."
msgstr ""
"{\n"
"  \"singular\": \"`Modelo` con 2 variables de tipo y un modelo concreto `Modelo[str, int]`, el valor `(str, int)` se pasaría a `params`.\",\n"
"  \"plural\": \"`Modelos` con 2 variables de tipo y modelos concretos `Modelos[str, int]`, los valores `(str, int)` se pasarían a `params`.\"\n"
"}"

#: c52caad94f6c436c8f85dd402af171b4 of
#: pydantic.main.BaseModel.model_parametrized_name:11
msgid "Returns:"
msgstr ""
"{\n"
"  \"singular\": {\n"
"    \"msgid\": \"Returns:\",\n"
"    \"msgstr\": \"Devoluciones:\"\n"
"  },\n"
"  \"plural\": {\n"
"    \"msgid\": \"Returns:\",\n"
"    \"msgstr\": \"Devoluciones:\"\n"
"  }\n"
"}"

#: f4904a6fa3a8416cbe0884006d14054f of
#: pydantic.main.BaseModel.model_parametrized_name:12
msgid ""
"String representing the new class where `params` are passed to `cls` as type"
" variables."
msgstr ""
"{\n"
"  \"singular\": \"Cadena que representa la nueva clase donde `params` se pasan a `cls` como variables de tipo.\",\n"
"  \"plural\": \"Cadenas que representan las nuevas clases donde `params` se pasan a `cls` como variables de tipo.\"\n"
"}"

#: 4d995de4292e4ac58c2067d536a7c3a2 of
#: pydantic.main.BaseModel.model_parametrized_name:14
msgid "Raises:"
msgstr ""
"{\n"
"  \"singular\": {\n"
"    \"msgid\": \"Raises\",\n"
"    \"msgstr\": \"Aumentos\"\n"
"  },\n"
"  \"plural\": {\n"
"    \"msgid\": \"Raises\",\n"
"    \"msgstr\": \"Aumentos\"\n"
"  }\n"
"}"

#: d84e605f462a4b088c5fba8b73d447c7 of
#: pydantic.main.BaseModel.model_parametrized_name:15
msgid ""
"TypeError: Raised when trying to generate concrete names for non-generic "
"models."
msgstr ""
"{\n"
"  \"singular\": \"TypeError: Se genera al intentar crear nombres concretos para modelos no genéricos.\",\n"
"  \"plural\": \"TypeError: Se genera al intentar crear nombres concretos para modelos no genéricos.\"\n"
"}"
