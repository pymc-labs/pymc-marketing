# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2025, PyMC Labs
# This file is distributed under the same license as the pymc-marketing
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pymc-marketing local\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-07 18:10+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/generated/classmethods/pymc_marketing.hsgp_kwargs.HSGPKwargs.model_parametrized_name.rst:2
#: c796a93f991848b59d3ca8bdbda78fba
msgid "HSGPKwargs.model\\_parametrized\\_name"
msgstr "HSGPKwargs.nombre\\_parametrizado\\_del\\_modelo"

#: fb239d544aab4f4fbeee480c1d63301a of
#: pydantic.main.BaseModel.model_parametrized_name:2
msgid "Compute the class name for parametrizations of generic classes."
msgstr ""
"Calcule el nombre de la clase para parametrizaciones de clases genéricas."

#: 090644b506664665a8c3411b13e8ea89 of
#: pydantic.main.BaseModel.model_parametrized_name:4
msgid ""
"This method can be overridden to achieve a custom naming scheme for generic "
"BaseModels."
msgstr ""
"Este método se puede anular para lograr un esquema de nomenclatura "
"personalizado para BaseModels genéricos."

#: 0052d4e100354821bd8d5ecf7ae4f849 of
#: pydantic.main.BaseModel.model_parametrized_name:6
msgid "Args:"
msgstr "Args:"

#: 826db7f074064dda91be46cccdc799c4 of
#: pydantic.main.BaseModel.model_parametrized_name:7
msgid "params: Tuple of types of the class. Given a generic class"
msgstr "params: Tupla de tipos de la clase. Dada una clase genérica"

#: eae1dce3e10e4a079d8af985c74ff591 of
#: pydantic.main.BaseModel.model_parametrized_name:8
msgid ""
"`Model` with 2 type variables and a concrete model `Model[str, int]`, the "
"value `(str, int)` would be passed to `params`."
msgstr ""
"`Modelo` con 2 variables de tipo y un modelo concreto `Modelo[str, int]`, el"
" valor `(str, int)` se pasaría a `params`."

#: 56b1c500ed354e89867dbb781dde40a4 of
#: pydantic.main.BaseModel.model_parametrized_name:11
msgid "Returns:"
msgstr "Devoluciones:"

#: abfa221e8cb64ebba8e37af8f585049a of
#: pydantic.main.BaseModel.model_parametrized_name:12
msgid ""
"String representing the new class where `params` are passed to `cls` as type"
" variables."
msgstr ""
"Cadena que representa la nueva clase donde `params` se pasan a `cls` como "
"variables de tipo."

#: 2083cbbd40c34c7bbfebc6515e2cf45b of
#: pydantic.main.BaseModel.model_parametrized_name:14
msgid "Raises:"
msgstr "Aumentos:"

#: 572ceb58a2b64daaa0ea18f6cef72c9b of
#: pydantic.main.BaseModel.model_parametrized_name:15
msgid ""
"TypeError: Raised when trying to generate concrete names for non-generic "
"models."
msgstr ""
"TypeError: Se genera al intentar crear nombres concretos para modelos no "
"genéricos."
